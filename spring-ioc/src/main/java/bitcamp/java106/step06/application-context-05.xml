<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
    
    <!-- 클래스 이름이 FactoryBean으로 끝나면 
         d그 클래스가 FactoryBean 구현체 임을 쉽게 눈치챌 수 있다. -->
         <!-- 실제 만드는 객체는 Car 객체인 것이다. -->
    <bean id="c1" class="bitcamp.java106.step06.CarFactoryBean">
        <property name="model" value="소나타"/>
    </bean>
    <!-- 자바 코드:
            CarFactoryBean carFactory = new CarFactoryBean();
            carFactory.setModel("소나타"); // 객체를 생성하고 그 객체의 세터메서드 호출

            Object obj = null;
            // FactoryBean의 구현체 여부에 따라 "c1" 이라는 이름으로 저장할 객체가 다르다.
            if (carFactory instanceOf FactoryBean) { 
                //carFacroty가 FactoryBean규칙에 따라 만들어진 클래스라면
                obj = carFactory.getObject(); // 리턴값으로 저장
            } else {
                obj = carFacotry;
            }
            objPool.put("c1", obj);  // 내부적으로 객체풀이 있다고 가정, 내부적으로 객체풀에 넣는다. 
            Object obj = carFactory.create("SM5");
            -->
            <!-- 어떤 메서드를 써야 하는지 알려주지 않는다. -->
    <!-- 
        d속성
            factory-bean="공장역할을 수행하는 객체이름"
            factory-method="인스턴스 메서드 이름"
            => factory-bean 속성을 설정하면 factory-method는 static메서드가 아니라
            instance메서드를 가리키게 된다.
            -->
</beans>







