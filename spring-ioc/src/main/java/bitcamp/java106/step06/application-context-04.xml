<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
    
    <!-- 팩토리 메서드를 통해 객체를 만들기 : 스프링 규칙에 따라 만들기 -->
    <!-- 내부적으로는 getObject메서드가 호출되어서 그 리턴값으로 c1이 저장되어서 실행 -->
    <!-- 구분하는 방법 -> 보통 그 경우에는 이름을 FactoryBean으로 준다.
         d공장클래스임을 알려준다. -->
    <bean id="c1" class="bitcamp.java106.step06.CarFactory3">
        <property name="model" value="소나타"/>
    </bean>
    <!-- 자바 코드:
            CarFactory3 carFactory = new CarFactory3();
            carFactory.setModel("소나타"); // 객체를 생성하고 그 객체의 세터메서드 호출

            Object obj = null;
            // FactoryBean의 구현체 여부에 따라 "c1" 이라는 이름으로 저장할 객체가 다르다.
            if (carFactory instanceOf FactoryBean) { 
                //carFacroty가 FactoryBean규칙에 따라 만들어진 클래스라면
                obj = carFactory.getObject(); // 리턴값으로 저장
            } else {
                obj = carFacotry;
            }
            objPool.put("c1", obj);  // 내부적으로 객체풀이 있다고 가정, 내부적으로 객체풀에 넣는다. 
            Object obj = carFactory.create("SM5");
            -->
            <!-- 어떤 메서드를 써야 하는지 알려주지 않는다. -->
    <!-- 
        d속성
            factory-bean="공장역할을 수행하는 객체이름"
            factory-method="인스턴스 메서드 이름"
            => factory-bean 속성을 설정하면 factory-method는 static메서드가 아니라
            instance메서드를 가리키게 된다.
            -->
</beans>







