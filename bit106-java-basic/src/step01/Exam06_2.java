package step01;
// 부동 소수점의 리터럴 - 크기
public class Exam06_2 {
    public static void main(String[] args) {

        // 부동소수점도 크기에 따라 작성하는 방법이 다르다 
        System.out.println(3.14);   // 8바이트 크기의 부동소수점

        // 부동소수점 뒤에 F나 f를 붙이면 4바이트 크기의 부동소수점으로 다룬다.
        // - 주로 소문자를 붙인다.
        System.out.println(3.14f);   // 4바이트 크기의 부동소수점
        
        // 궁금?
        // - 정수는 메모리의 크기에 따라 최소값과 최대값이 정해진다.
        // - 부동소수점의 최소/최대값은?
        System.out.println(Float.MAX_VALUE);
        System.out.println(Float.MIN_VALUE);

        // 4byte 부동소수점 테스트
        System.out.println("------------------------------");
        System.out.println(987.6543f);
        System.out.println(987654.3f);
        System.out.println(9.876543f);

        // 다음 값은 4바이트 메모리 범위를 넘어가는 부동소수점이기 때문에 
        // 값이 짤린다.
        System.out.println(987654.345678f);
        System.out.println(98765434567.8f);
        System.out.println(9.87654345678f);

        // 8byte 부동소수점 테스트
        System.out.println("------------------------------");
        System.out.println(987.6543);
        System.out.println(987654.3);
        System.out.println(9.876543);
        
        // 다음 값은 8바이트 메모리 범위 안에서 표현 가능한 부동소수점이기 때문에
        // 정상적으로 출력된다.
        System.out.println(987654.345678);
        System.out.println(98765434567.8);
        System.out.println(9.87654345678);

        System.out.println("------------------------------");
        System.out.println(7.127f);

        System.out.println("------------------------------");
        System.out.println("7 * 0.1");
        // 결과 : 0.700000000000001
        // 이유?
        // - IEEE 754 규격에 따라 부동소수점을 2진수로 바꾸다 보면
        // 정확하게 2진수로 딱 떨어지지 않는 경우가 있다
        // CPU, OS, 컴파일러, JVM의 문제가 아니다
        // - IEEE-754의 방법이 내재되어 있는 문제다. 
        // 해결책?
        // - 시스템에서 필요한 만큼의 소수점이하 자리수를 적절히 짤라사용하라!
    }
}

// 결론!
// - 32비트(float) 메모리에 부동소수점을 저장할때는
//   유효자릿수 7자리까지는 (거의) 가능하다
// - 64비트(double) 메모리에 부동소수점을 저장할 때는 
//   유효자릿수 15자리까지는 (거의) 가능하다.
// - 그래서 32비트 float을 단정도(single-precision)라 부르고, 
//   64비트는 두 배 정밀하게 값을 저장한다고 해서 배정도(double-precision)이라 부른다.

// 부동소수점이 메모리에 저장되는 원리
// ### 부동소수점을 메모리에 저장
// - 어떤 값이든 2진수로 표현할 수 있다면 메모리에 비트로 저장할 수 있다.
// - 메모리의 각 비트는 전기의 on/off, 즉 1과 0의 값을 저장하기 때문이다.
// - 즉 음성, 화면, 촉각, 미각의 값을 메모리에 저장하려면, 2진수로 표현이 가능해야 한다.
// - 부동소수점을 2진수로 변환하는 것을 "정규화(nomalized)"라 부른다.
// - 부동소수점을 2진수로 표현하는 법칙을 정의한 문서가 "IEEE-754"이다.
//
// ### IEEE-754
// - 부동소수점을 32비트와 64비트로 표현하는 방법에 대해 정의하고 있다.
// - 32비트로 표현하는 방법을 "single-precision(정밀도 1; 단정도)"이라 한다.
// - 64비트로 표현하는 방법은 32비트에 대비해 두 배 가량 더 정밀하게 표현할 수 있다고 해서 "double-precision(정밀도가 두 배; 배정도)"이라 한다.
// 
// ### 부동소수점을 2진수로 표현하는 방법
// - 자바에서 부동소수점의 정규화는 "IEEE 754-1985" 명세에 따른다.
// - 메모리 크기와 비트의 구성
//   => 32비트 float 타입(32-bit single-precision; 단정도)
//     [부호비트(1)][지수부(8)][가수부(23)]
//   => 64비트 double 타입(64-bit double-precision; 배정도)
//     [부호비트(1)][지수부(11)][가수부(52)]
// - 부호비트(sign bit)
//   음수는 1, 양수는 0.
// - 지수(exponent)
//   127 bias를 사용한다. 즉 2의 지수 값에 127을 더한 결과 값을 사용한다.
// - 가수(fraction/mantissa)
//   sign-magnitude 방식으로 저장한다.
//   1.xxxx 값에서 소수점 왼쪽에 있는 1을 제외한 나머지 수를 사용한다.
//   가수부에 남는 비트가 있다면 0으로 채운다.

// ### 실수 값을 정규화하는 방법 = 실수 값을 32비트 2진수로 만드는 방법
// - 예: 12.375(10진수)
//
// 1) 소수점 앞의 정수 값을 2진수로 변환한다.
//   12(10진수)
//   = 1100(2진수)  
// 
// 2) 소수점 뒤의 값을 2진수로 변환한다.
// - 변환 규칙
// - 소수점을 2로 곱하여 나온 결과에서 정수 부분만을 차례대로 표기한다.
// - 소수 부분이 0이거나 반복되면 계산을 멈춘다.
// - 예: 0.375(10진수)
//   0.375 * 2 = 0.75  --> 0
//   0.75 * 2  = 1.5   --> 1
//   0.5 * 2   = 1.0   --> 1
//   => 0.011(2진수)
//
// 3) 2진수 바꾼 최종 결과
//   12.375(10진수)
//   = 12(10진수) + 0.375(10진수)
//   = 1100(2진수) + 0.011(2진수)
//   = 1100.011(2진수)
//   = 1*2^3 + 1*2^2 + 0*2^1 + 0*2^0 + 0*2^-1 + 1*2^-2 + 1*2^-3
//   = 1*8 + 1*4 + 0*2 + 0*1 + 0*0.5 + 1*0.25 + 1*0.125
// 
// 4) 정규화 
// - 소수점의 위치를 조정하여 가수부와 지수부를 분리한다.
// - IEEE 754 명세는 다음과 같은 형식으로 가수부와 지수부를 나눈다.
//   1.x1x2x3x4...x23(2진수) * 2^e
//   => 소수점 왼쪽에 1만 남도록 소수점을 이동한다.
//   => 소수점 왼쪽은 무조건 1이기 때문에 저장하지 않고 버린다.
//   => 따라서 소수점 오른쪽 수만 가수부에 놓는다.
//      즉 x1, x2 등은 가수부 1번 비트부터 23번 비트까지를 의미한다.
//   => 23번 비트까지 채우지 못하면 나머지 비트는 0으로 채운다.
// - 예)
//   1100.011(2진수)
//   = 1.100011(2진수) * 2^3
//   가수부 => 100011(2진수)
//   지수부 => 3 + 127(bias) = 130(10진수) = 10000010(2진수)
//
// 5) 32비트로 표현하기
//   [0][10000010][10001100000000000000000]
//   => 0100_0001_0100_0110_0000_0000_0000_0000
//   => 0x41460000
//
